
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВывестиСобытий = 100;
	
	Если РеквизитФормыВЗначение("Объект").Метаданные().Макеты.Количество() > 0 Тогда;
		
		Элементы.ФайлКомпоненты.Видимость = Ложь;
	
		СисИнфо = Новый СистемнаяИнформация;
		Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяМакетаКомпоненты = "ВнешняяОбработка.ТехЖурнал.Макет.КомпонентаWindows64";
		ИначеЕсли СисИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
			ИмяМакетаКомпоненты = "ВнешняяОбработка.ТехЖурнал.Макет.КомпонентаLinux64";
		Иначе
			ВызватьИсключение "Платформа не поддерживается";
		КонецЕсли;
		
		Если Не ПодключитьВнешнююКомпоненту(ИмяМакетаКомпоненты, "MedIgor", ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.НеИзолированно) Тогда
			ВызватьИсключение "Не удалось подключить компоненту";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	ПрочитатьНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультат;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаСервере()
	
	Если ЗначениеЗаполнено(ФайлКомпоненты) Тогда
		Если Не ПодключитьВнешнююКомпоненту(ФайлКомпоненты, "MedIgor", ТипВнешнейКомпоненты.Native, ТипПодключенияВнешнейКомпоненты.НеИзолированно) Тогда
			ВызватьИсключение "Не удалось подключить компоненту";
		КонецЕсли;
	КонецЕсли;
	
	Parser = Новый ("Addin.MedIgor.TechLogParser");
	
	Фильтр = Новый Массив;
	
	Если ФильтрИмяСобытия.Количество() > 1 Тогда
		Фильтр.Добавить(ФильтрИмяСобытияВСписке(ФильтрИмяСобытия.ВыгрузитьЗначения()));
	ИначеЕсли ФильтрИмяСобытия.Количество() > 0 Тогда
		Фильтр.Добавить(ФильтрИмяСобытияРавно(ФильтрИмяСобытия[0].Значение));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрДатаНачала) Тогда
		Фильтр.Добавить(ФильтрДатаБольшеИлиРавно(ФильтрДатаНачала));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрДатаКонца) Тогда
		Фильтр.Добавить(ФильтрДатаМеньшеИлиРавно(ФильтрДатаКонца));	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФильтрДлительность) Тогда
		Фильтр.Добавить(ФильтрДлительностьБольшеИлиРавно(ФильтрДлительность));	
	КонецЕсли;
	
	Для Каждого СтрокаФильтрСвойства Из ФильтрСвойства Цикл
		Если СтрокаФильтрСвойства.ВидСравнения = "Равно" Тогда
			Фильтр.Добавить(ФильтрСвойствоРавно(СтрокаФильтрСвойства.Имя, СтрокаФильтрСвойства.Значение));
		ИначеЕсли СтрокаФильтрСвойства.ВидСравнения = "Содержит" Тогда
			Фильтр.Добавить(ФильтрСвойствоСодержит(СтрокаФильтрСвойства.Имя, СтрокаФильтрСвойства.Значение));
		ИначеЕсли СтрокаФильтрСвойства.ВидСравнения = "Соответствует" Тогда
			Фильтр.Добавить(ФильтрСвойствоСоответствует(СтрокаФильтрСвойства.Имя, СтрокаФильтрСвойства.Значение));
		ИначеЕсли ПустаяСтрока(СтрокаФильтрСвойства.ВидСравнения) Тогда
			ВызватьИсключение "Не указан вид сравнения";			
		КонецЕсли;
		
	КонецЦикла;
	
	Фильтр = ОбъектВJson(Фильтр);
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Попытка
		Результат = Parser.ParseFile(ФайлЛога, Фильтр, ВывестиСобытий);
	Исключение
		ВызватьИсключение Parser.LastError;
	КонецПопытки;
	Конец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Результат = JsonВОбъект(Результат);
	
	События.Очистить();
	
	Для Каждого Событие Из Результат Цикл
		СтрокаСобытие = События.Добавить();
		СтрокаСобытие.Дата = XMLЗначение(Тип("Дата"), Событие["Date"]);
		СтрокаСобытие.ДатаМкс = Число(Лев(Сред(Событие["Date"], 21) + "000000", 6));
		СтрокаСобытие.Имя = Событие["Name"];
		СтрокаСобытие.Уровень = Событие["Level"];
		СтрокаСобытие.Длительность = Событие["Duration"];
		Для Каждого Свойство Из Событие["Props"] Цикл
			СтрокаСвойство = СтрокаСобытие.Свойства.Добавить();
			СтрокаСвойство.Имя = Свойство[0];
			СтрокаСвойство.Значение = Свойство[1];
		КонецЦикла;
		
	КонецЦикла;
	
	Инфо = Новый Файл(ФайлЛога);
	РазмерМб = Окр(Инфо.Размер() / 1024/ 1024, 3);
	
	ШаблонСтатистики = "Длительность парсинга: %1 сек, количество событий: %2, размер файла: %3 Мб";
	Статистика = СтрШаблон(ШаблонСтатистики, (Конец - Начало) / 1000, События.Количество(), РазмерМб);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция JsonВОбъект(ДвоичныеДанные)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ДвоичныеДанные.ОткрытьПотокДляЧтения());
	Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	Возврат Данные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектВJson(Объект)
	
	Поток = Новый ПотокВПамяти;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьПоток(Поток);
	ЗаписатьJSON(ЗаписьJSON, Объект);
	ЗаписьJSON.Закрыть();
	
	Поток.Перейти(0, ПозицияВПотоке.Начало);
	Буфер = Новый БуферДвоичныхДанных(Поток.Размер());
	РезультатЧтения = Поток.Прочитать(Буфер, 0, Буфер.Размер);
	
	Возврат ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрИмяСобытияРавно(Имя)
	
	Возврат Новый Структура("Name", Новый Структура("Equal", Имя));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрИмяСобытияВСписке(Имена)
	
	Возврат Новый Структура("Name", Новый Структура("InList", Имена));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрДлительностьБольшеИлиРавно(Длительность)
	
	Возврат Новый Структура("Duration", Новый Структура("GreaterOrEqual", Длительность));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрДлительностьМеньшеИлиРавно(Длительность)
	
	Возврат Новый Структура("Duration", Новый Структура("LessOrEqual", Длительность));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрСвойствоРавно(Имя, Значение)
	
	Возврат Новый Структура("Prop", Новый Структура("Name, Filter", Имя, Новый Структура("Equal", Значение)));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрСвойствоСодержит(Имя, Значение)
	
	Возврат Новый Структура("Prop", Новый Структура("Name, Filter", Имя, Новый Структура("Contains", Значение)));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрСвойствоСоответствует(Имя, Значение)
	
	Возврат Новый Структура("Prop", Новый Структура("Name, Filter", Имя, Новый Структура("Match", Значение)));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрДатаБольшеИлиРавно(Дата)
	
	Возврат Новый Структура("Date", Новый Структура("GreaterOrEqual", XMLСтрока(Дата)));
	
КонецФункции

&НаСервереБезКонтекста
Функция ФильтрДатаМеньшеИлиРавно(Дата)
	
	Возврат Новый Структура("Date", Новый Структура("LessOrEqual", XMLСтрока(Дата)));
	
КонецФункции

&НаКлиенте
Процедура СобытияСвойстваВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) 
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Элементы.СобытияСвойства.ТекущиеДанные.Значение);
	Текст.Показать(Элементы.СобытияСвойства.ТекущиеДанные.Имя);
	
КонецПроцедуры
